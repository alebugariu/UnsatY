(set-option :smt.auto-config false)
(set-option :smt.mbqi false)
(set-option :sat.random_seed 488)
(set-option :smt.random_seed 599)
(set-option :nlsat.seed 611)
(set-option :memory_max_size 6000)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort RegExStr 0)
(declare-sort RMode 0)
(declare-sort |T@T| 0)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun boolType () T@T)
(declare-fun type (T@U) T@T)
(declare-fun RefType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(assert (! (= (Ctor intType) 1) :named B0))
(assert (! (= (Ctor boolType) 2) :named B1))
(assert (! (forall ((kt0py0 T@T)(vt0py0 T@T)) (! (= (MapType1TypeInv1 (MapType1Type kt0py0 vt0py0)) vt0py0) :pattern ((MapType1Type kt0py0 vt0py0)) )) :named A0))
(assert (! (forall ((m1py0 T@U)(k1py0 T@U)(v1py0 T@U)) (! (= (type (MapType1Select m1py0 k1py0 v1py0)) (MapType1TypeInv1 (type m1py0))) :pattern ((MapType1Select m1py0 k1py0 v1py0)) )) :named A1))
(assert (! (forall ((m2py0 T@U)(k2py0 T@U)(x2py0 T@U)(v2py0 T@U)) (! (= (type (MapType1Store m2py0 k2py0 x2py0 v2py0)) (MapType1Type (type k2py0) (type v2py0))) :pattern ((MapType1Store m2py0 k2py0 x2py0 v2py0)) )) :named A2))
(assert (! (forall ((v3py0 T@U)(m3py0 T@U)(k3py0 T@U)(x3py0 T@U)(other_k3py0 T@U)(other_v3py0 T@U)) (! (or (= k3py0 other_k3py0) (= (MapType1Select (MapType1Store m3py0 k3py0 x3py0 v3py0) other_k3py0 other_v3py0) (MapType1Select m3py0 other_k3py0 other_v3py0))) :pattern ((MapType1Select (MapType1Store m3py0 k3py0 x3py0 v3py0) other_k3py0 other_v3py0)) )) :named A3))
(assert (! (forall ((arg4py0 Int)) (! (= (type (int_2_U arg4py0)) intType) :pattern ((int_2_U arg4py0)) )) :named A4))
(assert (! (forall ((arg5py0 Bool)) (! (= (type (bool_2_U arg5py0)) boolType) :pattern ((bool_2_U arg5py0)) )) :named A5))
(assert (! (forall ((arg6py0 Int)) (! (= (U_2_int (int_2_U arg6py0)) arg6py0) :pattern ((int_2_U arg6py0)) )) :named A6))
