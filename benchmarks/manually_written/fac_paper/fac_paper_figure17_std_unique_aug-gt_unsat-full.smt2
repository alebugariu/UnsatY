(set-option :smt.auto-config false)
(set-option :smt.mbqi false)
(set-option :sat.random_seed 488)
(set-option :smt.random_seed 599)
(set-option :nlsat.seed 611)
(set-option :memory_max_size 6000)
(declare-sort ISeq 0)
(declare-sort RegExStr 0)
(declare-sort RMode 0)
(declare-fun sum (ISeq Int Int) Int)
(declare-fun sum_syn (ISeq Int Int) Int)
(declare-fun empty () ISeq)
(declare-fun seq.nth (ISeq Int) Int)
(assert (! (forall ((xs0py0 ISeq)(l0py0 Int)(h0py0 Int)) (! (= (sum xs0py0 l0py0 h0py0) (sum_syn xs0py0 l0py0 h0py0)) :pattern ((sum xs0py0 l0py0 h0py0)) )) :named A0))
(assert (! (forall ((xs1py0 ISeq)(l1py0 Int)(h1py0 Int)) (! (or (not (<= h1py0 l1py0)) (= (sum_syn xs1py0 l1py0 h1py0) 0)) :pattern ((sum xs1py0 l1py0 h1py0)) )) :named A1))
(assert (! (forall ((xs2py0 ISeq)(l2py0 Int)(h2py0 Int)) (! (or (not (<= l2py0 h2py0)) (= (sum_syn xs2py0 l2py0 h2py0) (+ (sum_syn xs2py0 (+ 1 l2py0) h2py0) (seq.nth xs2py0 l2py0)))) :pattern ((sum xs2py0 l2py0 h2py0)) )) :named A2))
(assert (! (= (seq.nth empty 0) (- 1)) :named A3))
(check-sat)
(get-info :reason-unknown)